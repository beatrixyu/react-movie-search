{"version":3,"sources":["movieCard.js","movieSearch.js","tvShowSearch.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","MoviesSearch","useState","query","setQuery","movies","setMovies","movieSearch","e","a","preventDefault","url","fetch","res","json","data","console","log","results","target","value","onSubmit","htmlFor","type","placeholder","name","onChange","filter","map","TvShowsSearch","tvShows","settvShows","tvShowsearch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e81da1b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function MovieCard({ movie }) {\n  return (\n    <div className=\"card\" key={movie.id}>\n      <img\n        className=\"card--image\"\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + \" poster\"}\n      />\n      <div className=\"card--content\">\n        <h3 className=\"card--title\">{movie.title}</h3>\n        <p>\n          <small>RELEASE DATE: {movie.release_date}</small>\n        </p>\n        <p>\n          <small>RATING: {movie.vote_average}</small>\n        </p>\n        <p className=\"card--desc\">{movie.overview}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport MovieCard from \"./movieCard\";\n\nexport default function MoviesSearch() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const movieSearch = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=263f66f57fc5f5bf1091e277d1f2e955&query=${query}&language=en-US&page=1`;\n    //const url = `https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}?api_key=263f66f57fc5f5bf1091e277d1f2e955&language=en-US`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data);\n      console.log(data.results);\n      setMovies(data.results);\n      console.log(e.target.value);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={movieSearch}>\n        <label className=\"label\" htmlFor=\"query\">\n          Looking for a Movie?\n        </label>\n\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"ie Spiderman\"\n          name=\"query\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        ></input>\n\n        <button className=\"button\" type=\"submit\">\n          Click to Search\n        </button>\n      </form>\n      <div className=\"card-list\">\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} />\n          ))}\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport MovieCard from \"./movieCard\";\n\nexport default function TvShowsSearch() {\n  const [query, setQuery] = useState(\"\");\n  const [tvShows, settvShows] = useState([]);\n\n  const tvShowsearch = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=263f66f57fc5f5bf1091e277d1f2e955&query=${query}&language=en-US&page=1`;\n    //const url = `https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}?api_key=263f66f57fc5f5bf1091e277d1f2e955&language=en-US`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data);\n      console.log(data.results);\n      settvShows(data.results);\n      console.log(e.target.value);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={tvShowsearch}>\n        <label className=\"label\" htmlFor=\"query\">\n          Looking for a TV Show?\n        </label>\n\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"ie Spiderman\"\n          name=\"query\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        ></input>\n\n        <button className=\"button\" type=\"submit\">\n          Click to Search\n        </button>\n      </form>\n      <div className=\"card-list\">\n        {tvShows\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} />\n          ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieSearch from \"./movieSearch\";\nimport TVshowsSearch from \"./tvShowSearch\";\nimport Header from \"./header\";\nimport \"./index.css\";\n\nfunction App() {\n  return (\n    <div>\n      <div id=\"backGround\">\n        <h1>POP TV</h1>\n      </div>\n      {/* <Header></Header> */}\n      <MovieSearch />\n      <TVshowsSearch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}